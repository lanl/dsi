import pyarrow as pa
from pyarrow import parquet as pq
import nbformat as nbf
import subprocess

from dsi.drivers.filesystem import Filesystem


class Parquet(Filesystem):
    """
    Support for a Parquet back-end Driver.

    Parquet is a convenient format when metadata are larger than SQLite supports.
    """

    def __init__(self, filename, **kwargs):
        super().__init__(filename=filename, **kwargs)
        try:
            self.compression = kwargs['compression']
        except KeyError:
            self.compression = None

    def get_artifacts(self):
        """Get Parquet data from filename."""
        table = pq.read_table(self.filename)
        resout = table.to_pydict()
        self.perms_manager.register_columns_with_file(
            list(resout.keys()), self.filename)
        return resout

    def put_artifacts(self, collection):
        """Put artifacts into file at filename path."""
        def write_dict(collection, fname):
            table = pa.table(collection)
            pq.write_table(table, fname, compression=self.compression)

        self.write_files(collection, write_func=write_dict,
                         f_basename=self.filename[:-3], f_ext='.pq')

    @staticmethod
    def get_cmd_output(cmd: list) -> str:
        """
        Runs a given command and returns the stdout if successful.

        If stderr is not empty, an exception is raised with the stderr text.
        """
        proc = subprocess.run(cmd, capture_output=True, shell=True)
        if proc.stderr != b"":
            raise Exception(proc.stderr)
        return proc.stdout.strip().decode("utf-8")

    def inspect_artifacts(self, collection):
        """Populate a Jupyter notebook with tools required to look at Parquet data."""
        nb = nbf.v4.new_notebook()
        text = """\
        # This notebook was auto-generated by a DSI Driver for Parquet.
        # Execute the Jupyter notebook cells below and interact with "df"
        # to explore your data.
        """
        code1 = """\
        import pandas as pd
        df = pd.read_parquet('{}')
        df.head()
        """.format(self.filename)

        code2 = """\
        df.info()
        """

        code3 = """\
        df.describe()
        """

        nb['cells'] = [nbf.v4.new_markdown_cell(text),
                       nbf.v4.new_code_cell(code1),
                       nbf.v4.new_code_cell(code2),
                       nbf.v4.new_code_cell(code3)]

        fname = 'dsi_parquet_driver_output.ipynb'

        print('Writing Jupyter notebook...')
        with open(fname, 'w') as fh:
            nbf.write(nb, fh)

        print('Opening Jupyter notebook...')
        self.get_cmd_output(
            cmd=['jupyter-lab ./dsi_parquet_driver_output.ipynb'])
